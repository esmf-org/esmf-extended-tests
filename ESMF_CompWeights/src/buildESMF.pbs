#!/bin/bash
#
#PBS -N esmfbuild
#PBS -A P93300606
#PBS -l walltime=01:00:00
#PBS -q economy
#PBS -l select=1:ncpus=36:mpiprocs=36
#PBS -j oe
#PBS -m n

set -e

ESMFDIR=${1}
BRANCH=${2}
MODULES=${3}
GNU10=${4}

ESMF_OS=${5}
ESMF_COMPILER=${6}
ESMF_COMM=${7}
ESMF_NETCDF=${8}
ESMF_NETCDF_INCLUDE=${9}
ESMF_NETCDF_LIBPATH=${10}
ESMF_BOPT=${11}
ESMF_OPTLEVEL=${12}
ESMF_ABI=${13}
ESMF_BUILD_NP=${14}

export ESMF_DIR=${ESMFDIR}
export ESMF_COMPILER=${ESMF_COMPILER}
export ESMF_COMM=${ESMF_COMM}
export ESMF_NETCDF=${ESMF_NETCDF}
export ESMF_NETCDF_INCLUDE=${ESMF_NETCDF_INCLUDE}
export ESMF_NETCDF_LIBPATH=${ESMF_NETCDF_LIBPATH}
export ESMF_BOPT=${ESMF_BOPT}
export ESMF_OPTLEVEL=${ESMF_OPTLEVEL}
export ESMF_ABI=${ESMF_ABI}

# echo ${ESMF_DIR}
# echo ${BRANCH}
# echo ${MODULES}
# echo ${GNU10}

# echo ${ESMF_COMPILER}
# echo ${ESMF_COMM}
# echo ${ESMF_NETCDF}
# echo ${ESMF_NETCDF_INCLUDE}
# echo ${ESMF_NETCDF_LIBPATH}
# echo ${ESMF_BOPT}
# echo ${ESMF_OPTLEVEL}
# echo ${ESMF_ABI}

unset ESMF_TESTEXHAUSTIVE;
unset ESMF_CXXCOMPILEOPTS; unset ESMF_F90COMPILEOPTS;

# load the run environment
${MODULES}

if [[ ${GNU10} == "True" ]]; then
    export ESMF_F90COMPILEOPTS+=" -fallow-argument-mismatch -fallow-invalid-boz"
    echo "GNU10 has been specified, ESMF_F90COMPILEOPTS = ${ESMF_F90COMPILEOPTS}"
fi

### Build and install ESMF
cd ${ESMF_DIR}
make -j${ESMF_BUILD_NP} distclean &> /dev/null
make -j${ESMF_BUILD_NP} &> ${BRANCH}-${ESMF_COMPILER}-${ESMF_COMM}-build.out
make install &> ${BRANCH}-${ESMF_COMPILER}-${ESMF_COMM}-install.out

# write the ESMFMKFILE to $ESMF_DIR/esmfmkfile.out for later use
# this is helpful to do here because all build flags are still available
rm -f ${ESMF_DIR}/esmfmkfile.out
echo "${ESMF_DIR}/DEFAULTINSTALLDIR/lib/lib${ESMF_BOPT}/${ESMF_OS}.${ESMF_COMPILER}.${ESMF_ABI}.${ESMF_COMM}.default/esmf.mk" > ${ESMF_DIR}/esmfmkfile.out