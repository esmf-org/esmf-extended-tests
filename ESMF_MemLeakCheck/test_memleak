############################### mem leak test_esmf ########################################

#!/bin/bash -l 
#PBS -eo -q reg -l nodes=1:ppn=1

cd $ESMF_DIR


env

#Clobber previous arch files
gmake -j4 clobber 1> tmp 2>&1


echo "" >> $LOGDIR/mailMessage
echo "_______________________________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

test_results=0  #assume build passes
install_results=0  #assume install passes
tests=0
test_failures=0
ex_passed=0
ex_failed=0

echo "`date` on `uname -n` " >> $LOGDIR/mailMessage
echo "Compiler and configuration information:" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
echo "-------------------------------------------------------------- " >> $LOGDIR/mailMessage

module list  1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage


echo " " >> $LOGDIR/mailMessage
git remote -v 1> tmp 2>&1

if (grep -i "Not a git repository" tmp)
then
        #Checkout failed
        echo "Test_results:blue" > $LOGDIR/Test_Status
fi

echo "Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage

gmake ESMF_BOPT=$OPT info 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage



gmake -j4 ESMF_BOPT=$OPT  1> tmp 2>&1
if [ "$?" != "0" ]
then
        echo "Library build FAIL with ESMF_BOPT=$OPT"

	if [ $OPT != g ]
	then 
		cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	else
		cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	fi #end of if [ $OPT != g ]

	echo "`date` library build -j4 ************FAIL" >> $LOGDIR/mailMessage
	test_results=1
	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "The following is the 'tail' of the build failure">> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
        tail  -50 tmp >> $LOGDIR/mailMessage


        # If checkout did not fail, set test status to red, build failed
        if !(grep "blue" $LOGDIR/Test_Status)
        then
                echo "Test_results:red" > $LOGDIR/Test_Status
                echo "Set Test Status to red."
        fi


else

       	echo "Library build PASS with ESMF_BOPT=$OPT"
	echo "`date` library build -j4 ............PASS" >> $LOGDIR/mailMessage

        # Check for warnings
        if grep -i "warning[ ]*:" tmp
        then
                echo "Builds with warnings." >> $LOGDIR/mailMessage
        fi

	# check if all files should be logged
	if [[ $LOGTMP = "ALL" ]]
	then
        	if [ $OPT != g ]
        	then 
                	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	else    
                	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	fi #end of if [ $OPT != g ]
	fi # end of if [[ $LOGTMP = "ALL" ]]


        gmake  ESMF_BOPT=$OPT  build_apps 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "build apps FAILED with ESMF_BOPT=$OPT"
                install_results=1  # build apps failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/buils_apps_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/buils_apps_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
                echo "`date` apps build *******************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the build_apps failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi



                else

                echo "build apps PASSED with ESMF_BOPT=$OPT"
                echo "`date` apps build ...................PASS" >> $LOGDIR/mailMessage

        fi #end of build apps



        gmake  ESMF_BOPT=$OPT  install 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "Library install FAILED with ESMF_BOPT=$OPT"
                install_results=1  # install failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/install_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/install_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]

                echo "`date` library install **************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi



                else

                echo "Library install PASSED with ESMF_BOPT=$OPT"
                echo "`date` library install ..............PASS" >> $LOGDIR/mailMessage

                gmake  ESMF_BOPT=$OPT  installcheck 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Library install check FAILED with ESMF_BOPT=$OPT"
                        install_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/installcheck_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/installcheck_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` library installcheck *********FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage

                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi



                        else

                        echo "Library install PASSED with ESMF_BOPT=$OPT"
                        echo "`date` library installcheck .........PASS" >> $LOGDIR/mailMessage

                fi

                gmake  ESMF_BOPT=$OPT  build_quick_start 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Quick start build check FAILED with ESMF_BOPT=$OPT"
                        quickstart_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/quickstart_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/quickstart_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` quickstart build *************FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the quickstart build  failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage

                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi



                        else

                        echo "Quickstart build passed with ESMF_BOPT=$OPT"
                        echo "`date` quickstart build .............PASS" >> $LOGDIR/mailMessage
                        quickstart_results=0  # quick_start passed

                fi


        fi

	echo "" >> $LOGDIR/mailMessage
	echo "|----------------------- SYSTEM TESTS -------------------------|" >> $LOGDIR/mailMessage


        
        gmake   ESMF_BOPT=$OPT build_system_tests 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "system_tests build FAIL "
                echo "`date` build_system_tests ***********FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the system tests failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi



        else
                echo "build_system_tests PASS "
                echo "`date` build_system_tests ...........PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

        fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT build_system_tests 1> tmp 2>&1

        
        if [[ $ESMF_COMM = "lam" ]]
        then
                lamhalt
                sleep 30
                lamboot -ssi  rpi tcp
        fi #end of  if [[ $ESMF_COMM = "lam" ]]
                



        if [[ $SYS_TEST_TYPE = "UNI" ]]
        then
                gmake ESMF_BOPT=$OPT run_system_tests_uni 1> tmp 2>&1
        else
                gmake ESMF_BOPT=$OPT run_system_tests 1> tmp 2>&1
        fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

        if [ "$?" != "0" ]
        then
                if [[ $SYS_TEST_TYPE = "UNI" ]]
                then
                        echo "run_system_tests_uni FAIL "
                        echo "`date` run_system_tests_uni *********FAIL" >> $LOGDIR/mailMessage

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_system_tests_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_system_tests_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi # end of if [ $OPT != g ]
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the run_examples_uni failure">> $LOGDIR/mailMessage
                else
                        echo "run_system_tests FAIL "
                        echo "`date` run_system_tests *************FAIL" >> $LOGDIR/mailMessage

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi # end of if [ $OPT != g ]
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the run_system_tests failure">> $LOGDIR/mailMessage
                fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi




        else
                if [[ $SYS_TEST_TYPE = "UNI" ]]
                then
                        echo "run_system_tests_uni PASS "
                        echo "`date` run_system_tests_uni .........PASS" >> $LOGDIR/mailMessage
                else
                        echo "run_system_tests PASS "
                        echo "`date` run_system_tests .............PASS" >> $LOGDIR/mailMessage
                fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]
        fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT run_system_tests 1> tmp 2>&1

        if [[ $LOGTMP = "ALL" ]]
        then
                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
         fi # end of if [[ $LOGTMP = "ALL" ]]

	gmake check_system_tests_ml >> $LOGDIR/mailMessage
	read pass sysTestPass fail sysTestFail < $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/system_tests_ml_results

        if [[ $sysTestFail != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
                total=`expr $failures + $sysTestFail`
                echo "$total" > $LOGDIR/Test_Failures
                echo "New failure total is $total."
        fi




        #make tarballs of test directories
        mkdir test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar -cf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        cp -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
	mv -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $web_dir/.
        rm -rf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM


	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "|------------------------- EXAMPLES ---------------------------|" >> $LOGDIR/mailMessage



        gmake   ESMF_BOPT=$OPT build_examples 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "examples build FAIL "
                echo "`date` build_examples build *********FAIL" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "The following is the 'tail' of the examples failure">> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi



        else
                echo "build_examples PASS "
                echo "`date` build_examples ...............PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

        fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT build_examples 1> tmp 2>&1

        if [[ $ESMF_COMM = "lam" ]]
        then
                lamhalt
                sleep 30
                lamboot -ssi  rpi tcp
        fi #end of  if [[ $ESMF_COMM = "lam" ]]


	if [[ $SYS_TEST_TYPE = "UNI" ]]
	then
		gmake ESMF_BOPT=$OPT run_examples_uni 1> tmp 2>&1
	else
		gmake ESMF_BOPT=$OPT run_examples 1> tmp 2>&1
	fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]
		
        if [ "$?" != "0" ]
        then
		if [[ $SYS_TEST_TYPE = "UNI" ]]
		then
                	echo "run_examples_uni FAIL "
                	echo "`date` run_examples_uni *************FAIL" >> $LOGDIR/mailMessage

                	if [ $OPT != g ]
                	then
                        	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	else
                        	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	fi # end of if [ $OPT != g ]
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_examples_uni failure">> $LOGDIR/mailMessage
		else
                	echo "run_examples FAIL "
                	echo "`date` run_examples *****************FAIL" >> $LOGDIR/mailMessage

                	if [ $OPT != g ]
                	then
                        	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	else
                        	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	fi # end of if [ $OPT != g ]
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_examples failure">> $LOGDIR/mailMessage
		fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi




        else
		if [[ $SYS_TEST_TYPE = "UNI" ]]
		then
                	echo "run_examples_uni PASS "
                	echo "`date` run_examples_uni .............PASS" >> $LOGDIR/mailMessage
		else
                	echo "run_examples PASS "
                	echo "`date` run_examples .................PASS" >> $LOGDIR/mailMessage
		fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]
        fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT run_examples 1> tmp 2>&1

        if [[ $LOGTMP = "ALL" ]]
        then
        	if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
         fi # end of if [[ $LOGTMP = "ALL" ]]

	gmake check_examples_ml >> $LOGDIR/mailMessage
	read pass ex_passed fail ex_failed < $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/examples_ml_results

        if [[ $ex_failed != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
                total=`expr $failures + $ex_failed`
                echo "$total" > $LOGDIR/Test_Failures
                echo "New failure total is $total."
        fi



        # Make tarball of the examples Log and stdout files
        mkdir examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xml examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xsd examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar -cf examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        cp -f examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        mv -f examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $web_dir/.
        rm -rf examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM



	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage


	if [[ $U_TESTS = "NON" ]]
	then
		echo "|-------------------NON_EXHAUSTIVE UNIT TESTS -----------------|" >> $LOGDIR/mailMessage
	else
		echo "|-------------------- EXHAUSTIVE UNIT TESTS -------------------|" >> $LOGDIR/mailMessage
	fi # end of if [[ $U_TESTS = "NON" ]]
	gmake   build_unit_tests 1> tmp 2>&1
	if [ "$?" != "0" ]
        then
        	echo "build_unit_tests FAIL "
		echo "`date` build_unit_tests *************FAIL" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "The following is the 'tail' of the build_unit_tests failure">> $LOGDIR/mailMessage

        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

		if [ $OPT != g ]
		then
			cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		else
			cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi



	else
		echo "build_unit_tests PASS "
		echo "`date` build_unit_tests .............PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

	fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  build_unit_tests 1> tmp 2>&1


        if [[ $ESMF_COMM = "lam" ]]
        then
                lamhalt
                sleep 30
                lamboot -ssi  rpi tcp
        fi #end of  if [[ $ESMF_COMM = "lam" ]]


        if [[ $U_TESTS_TYPE = "UNI" ]]
        then
                gmake run_unit_tests_uni 1> tmp 2>&1
        else
                gmake run_unit_tests 1> tmp 2>&1

        fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]



	if [ "$?" != "0" ]
       	then
		if [[ $U_TESTS_TYPE = "UNI" ]]
		then
       			echo "run_unit_tests_uni FAIL "
			echo "`date` run_unit_tests_uni ***********FAIL" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_unit_tests_uni failure">> $LOGDIR/mailMessage
		else
       			echo "run_unit_tests FAIL "
			echo "`date` run_unit_tests ***************FAIL" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_unit_tests failure">> $LOGDIR/mailMessage
		fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]

        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage


		if [ $OPT != g ]
		then
			cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		else
			cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi



	else
		if [[ $U_TESTS_TYPE = "UNI" ]]
		then
       			echo "run_unit_tests_uni PASS "
			echo "`date` run_unit_tests_uni ...........PASS" >> $LOGDIR/mailMessage
		else
       			echo "run_test PASS "
			echo "`date` run_unit_tests ...............PASS" >> $LOGDIR/mailMessage
		fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]
		if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]


	fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  run_unit_tests_uni 1> tmp 2>&1

	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
                
        gmake check_unit_tests_ml >> $LOGDIR/mailMessage
        read pass num_pass_total fail test_failures < $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/unit_tests_ml_results 

        if [[ $test_failures != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
                total=`expr $failures + $test_failures`
                echo "$total" > $LOGDIR/Test_Failures
                echo "New failure total is $total."
        fi

                
        #make tarballs of test directories
        mkdir test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*html test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xml test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xsd test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/test_harness* test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar -cf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        cp -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        mv -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $web_dir/.
        rm -rf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM


fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  1> tmp 2>&1

# Make name as short as possible
name=`uname -n | sed 's/\..*//'`


if [[ $test_results != 0 ]] 
then  #The build failed
	echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
        if [[ $install_results != 0 || $quickstart_results != 0 ]] 
        then  #The install failed
                echo "PASS FAIL $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $num_pass_total/$test_failures $ex_passed/$ex_failed $sysTestPass/$sysTestFail" >> $LOGDIR/summary
        else
                echo "PASS PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $num_pass_total/$test_failures $ex_passed/$ex_failed $sysTestPass/$sysTestFail" >> $LOGDIR/summary
        fi
fi #end of if [$test_results != 0]



echo "" >> $LOGDIR/mailMessage


# keep expect happy
echo "test_esmf has finished"





